@use 'sass:map'
@use 'sass:meta'

$dropdown-horizontal-padding: 0.625rem
$sidebar-default-width: 15rem

$_1px: 0.0625rem

// Visual box styles
$__possible_sides: 'top', 'right', 'bottom', 'left'

@mixin visual-box-outer
  color: var(--c-fg)
  background-color: var(--c-bg-outer)

@mixin visual-box-flat
  color: var(--c-fg)
  background-color: var(--c-bg)
  box-shadow: inner-border-for(bottom)

@mixin visual-box-float
  @include visual-box-flat

  box-shadow: var(--shadow-box) var(--c-outline)

@function inner-border-for($sides, $color: var(--c-outline))

  // $kwargs: meta.keywords($sides)

  // $color: var(--c-outline)

  // @if map.has-key($kwargs, color)
  //   $color: map.get($kwargs, color)

  //   @if meta.type-of($sides) == map
  //     $keys: map.keys($sides)
  //     @each $key in $keys
  //       $sides: map.remove($sides, $key)

  @if length($sides) > 1
    $shadows: ()
    @each $side in $sides
      $shadows: append($shadows, inner-border-for($side, $color: $color))

    @return join((), $shadows, $separator: comma)

  @else if $sides == vertical
    @return inner-border-for(top bottom)

  @else if $sides == horizontal
    @return inner-border-for(right left)

  @else
    $side: nth($sides, 1)

    $x: 0
    $y: 0
    $spread: 0

    @if $side == left
      $x: 1
    @else if $side == right
      $x: -1
    @else if $side == top
      $y: 1
    @else if $side == bottom
      $y: -1
    @else if $side == all
      $spread: 1

    $x: $x * $_1px
    $y: $y * $_1px
    $spread: $spread * $_1px

    @return $x $y 0 $spread $color inset

@function inner-border-except-for($side_excluded)
  $shadows: ()
  @each $side in $__possible_sides
    @if $side != $side_excluded
      $shadows: append($shadows, inner-border-for($side))

  @return join((), $shadows, $separator: 'comma')

// Utilities

@mixin clickable
  transition: var(--transition-button)
  cursor: pointer
  user-select: none

  &:hover
    background-color: var(--c-state-hover)

@mixin background-image-icon($width, $height, $path, $style: null)
  @if $style == null
    background-image: simple-svg($width, $height, $path)
  @else
    background-image: simple-svg($width, $height, $path, $style)

  background-size: #{$width * 0.0625}rem #{$height * 0.0625}rem
  background-position: center
  background-repeat: no-repeat

@function simple-svg($width, $height, $path, $style: 'fill="none" stroke="white" stroke-width="1"')
  @return url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="#{$width}" height="#{$height}" #{$style}><path d="#{$path}"/></svg>')

@function single-color-image($color)
  @return linear-gradient(to right, $color, $color)
